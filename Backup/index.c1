
#include <stdio.h>
#include <stdlib.h>
// #include <sys/types.h>
#include <unistd.h>
#include <errno.h>
#include <sys/wait.h>
#include <linux/limits.h>
#include <string.h>

int main(int argc, char const *argv[])
{
  int forkingIndex, status;
  int counter = 1;
  FILE *fp;
  char path[PATH_MAX];

  /* ----------- Forking a child -------------*/

  if ( (forkingIndex = fork() ) ) 
  {

    if (forkingIndex < 0) 
    {
      perror("Process cannot be forked");
      exit(errno);
    }

    /* ----------- Parent --------------------*/
    while (fgets(path, PATH_MAX, fp) != NULL)
    {
        printf("Result %d : %s\n", counter, path);
        counter ++;
    }
  }

  /* ------------- Child ---------------------*/ 
  else 
  {  
    // In the child
    fp = popen(argv[1], "r");

    if (fp == NULL)
    {
        perror("Error on popen : ");
        exit(errno);
    }

    status =  pclose(fp);
    if (status == -1) 
    {
    /* Error reported by pclose() */
    perror("Error on pclose : ");
    exit(errno);
    }
    else
    {
      printf("Else.");
    }

  return 0;
  }
}